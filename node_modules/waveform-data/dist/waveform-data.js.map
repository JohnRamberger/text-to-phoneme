{"version":3,"file":"waveform-data.js","sources":["../src/waveform-data-channel.js","../node_modules/inline-worker/index.js","../src/util/main-thread-worker.js","../src/builders/audiodecoder.js","../src/waveform-utils.js","../src/waveform-data.js"],"sourcesContent":["/**\n * Provides access to the waveform data for a single audio channel.\n */\n\nfunction WaveformDataChannel(waveformData, channelIndex) {\n  this._waveformData = waveformData;\n  this._channelIndex = channelIndex;\n}\n\n/**\n * Returns the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.min_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Returns the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.max_sample = function(index) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._at(offset);\n};\n\n/**\n * Sets the waveform minimum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_min_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Sets the waveform maximum at the given index position.\n */\n\nWaveformDataChannel.prototype.set_max_sample = function(index, sample) {\n  var offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;\n\n  return this._waveformData._set_at(offset, sample);\n};\n\n/**\n * Returns all the waveform minimum values as an array.\n */\n\nWaveformDataChannel.prototype.min_array = function() {\n  return this._waveformData._offsetValues(\n    0,\n    this._waveformData.length,\n    this._channelIndex * 2\n  );\n};\n\n/**\n * Returns all the waveform maximum values as an array.\n */\n\nWaveformDataChannel.prototype.max_array = function() {\n  return this._waveformData._offsetValues(\n    0,\n    this._waveformData.length,\n    this._channelIndex * 2 + 1\n  );\n};\n\nexport default WaveformDataChannel;\n","var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);\n\nfunction InlineWorker(func, self) {\n  var _this = this;\n  var functionBody;\n\n  self = self || {};\n\n  if (WORKER_ENABLED) {\n    functionBody = func.toString().trim().match(\n      /^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/\n    )[1];\n\n    return new global.Worker(global.URL.createObjectURL(\n      new global.Blob([ functionBody ], { type: \"text/javascript\" })\n    ));\n  }\n\n  function postMessage(data) {\n    setTimeout(function() {\n      _this.onmessage({ data: data });\n    }, 0);\n  }\n\n  this.self = self;\n  this.self.postMessage = postMessage;\n\n  setTimeout(func.bind(self, self), 0);\n}\n\nInlineWorker.prototype.postMessage = function postMessage(data) {\n  var _this = this;\n\n  setTimeout(function() {\n    _this.self.onmessage({ data: data });\n  }, 0);\n};\n\nmodule.exports = InlineWorker;\n","function MainThreadWorker(func) {\n  this._listeners = {};\n\n  func.call(this);\n}\n\nMainThreadWorker.prototype.addEventListener = function(event, listener) {\n  if (!this._listeners[event]) {\n    this._listeners[event] = [];\n  }\n\n  this._listeners[event].push(listener);\n};\n\nMainThreadWorker.prototype.removeEventListener = function(event, listener) {\n  if (this._listeners[event]) {\n    this._listeners[event] = this._listeners[event].filter(function(item) {\n      return item !== listener;\n    });\n  }\n};\n\nMainThreadWorker.prototype.postMessage = function(data) {\n  var event = { data: data };\n\n  var listeners = this._listeners.message;\n\n  for (var i = 0; i < listeners.length; i++) {\n    listeners[i].call(this, event);\n  }\n};\n\nMainThreadWorker.prototype.close = function() {\n  this._listeners = {};\n};\n\nexport default MainThreadWorker;\n","import InlineWorker from \"inline-worker\";\nimport MainThreadWorker from \"../util/main-thread-worker\";\n\n/**\n * AudioBuffer-based WaveformData generator\n *\n * Adapted from BlockFile::CalcSummary in Audacity, with permission.\n * See https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/BlockFile.cpp\n */\n\nfunction processWorker(workerArgs, callback) {\n  var WaveformWorker = workerArgs.disable_worker ? MainThreadWorker : InlineWorker;\n\n  var worker = new WaveformWorker(function() {\n    var INT8_MAX = 127;\n    var INT8_MIN = -128;\n\n    function calculateWaveformDataLength(audio_sample_count, scale) {\n      var data_length = Math.floor(audio_sample_count / scale);\n\n      var samples_remaining = audio_sample_count - (data_length * scale);\n\n      if (samples_remaining > 0) {\n        data_length++;\n      }\n\n      return data_length;\n    }\n\n    this.addEventListener(\"message\", function listener(evt) {\n      if (!evt.data.audio_buffer) {\n        return;\n      }\n\n      var scale = evt.data.scale;\n      var amplitude_scale = evt.data.amplitude_scale;\n      var split_channels = evt.data.split_channels;\n      var audio_buffer = evt.data.audio_buffer;\n\n      var channels = audio_buffer.channels;\n      var output_channels = split_channels ? channels.length : 1;\n      var version = output_channels === 1 ? 1 : 2;\n      var header_size = version === 1 ? 20 : 24;\n      var data_length = calculateWaveformDataLength(audio_buffer.length, scale);\n      var total_size = header_size + data_length * 2 * output_channels;\n      var buffer = new ArrayBuffer(total_size);\n      var data_view = new DataView(buffer);\n\n      var scale_counter = 0;\n      var buffer_length = audio_buffer.length;\n      var offset = header_size;\n      var channel, i;\n\n      var min_value = new Array(output_channels);\n      var max_value = new Array(output_channels);\n\n      for (channel = 0; channel < output_channels; channel++) {\n        min_value[channel] = Infinity;\n        max_value[channel] = -Infinity;\n      }\n\n      data_view.setInt32(0, version, true); // Version\n      data_view.setUint32(4, 1, true); // Is 8 bit?\n      data_view.setInt32(8, audio_buffer.sampleRate, true); // Sample rate\n      data_view.setInt32(12, scale, true); // Scale\n      data_view.setInt32(16, data_length, true); // Length\n\n      if (version === 2) {\n        data_view.setInt32(20, output_channels, true);\n      }\n\n      for (i = 0; i < buffer_length; i++) {\n        var sample = 0;\n\n        if (output_channels === 1) {\n          for (channel = 0; channel < channels.length; ++channel) {\n            sample += channels[channel][i];\n          }\n\n          sample = Math.floor(INT8_MAX * sample * amplitude_scale / channels.length);\n\n          if (sample < min_value[0]) {\n            min_value[0] = sample;\n\n            if (min_value[0] < INT8_MIN) {\n              min_value[0] = INT8_MIN;\n            }\n          }\n\n          if (sample > max_value[0]) {\n            max_value[0] = sample;\n\n            if (max_value[0] > INT8_MAX) {\n              max_value[0] = INT8_MAX;\n            }\n          }\n        }\n        else {\n          for (channel = 0; channel < output_channels; ++channel) {\n            sample = Math.floor(INT8_MAX * channels[channel][i] * amplitude_scale);\n\n            if (sample < min_value[channel]) {\n              min_value[channel] = sample;\n\n              if (min_value[channel] < INT8_MIN) {\n                min_value[channel] = INT8_MIN;\n              }\n            }\n\n            if (sample > max_value[channel]) {\n              max_value[channel] = sample;\n\n              if (max_value[channel] > INT8_MAX) {\n                max_value[channel] = INT8_MAX;\n              }\n            }\n          }\n        }\n\n        if (++scale_counter === scale) {\n          for (channel = 0; channel < output_channels; channel++) {\n            data_view.setInt8(offset++, min_value[channel]);\n            data_view.setInt8(offset++, max_value[channel]);\n\n            min_value[channel] = Infinity;\n            max_value[channel] = -Infinity;\n          }\n\n          scale_counter = 0;\n        }\n      }\n\n      if (scale_counter > 0) {\n        for (channel = 0; channel < output_channels; channel++) {\n          data_view.setInt8(offset++, min_value[channel]);\n          data_view.setInt8(offset++, max_value[channel]);\n        }\n      }\n\n      // Transfer buffer to the calling thread\n      this.postMessage(buffer, [buffer]);\n      this.removeEventListener(\"message\", listener);\n      this.close();\n    });\n  });\n\n  worker.addEventListener(\"message\", function listener(evt) {\n    if (evt.data.audio_buffer) {\n      return;\n    }\n\n    callback(evt.data);\n\n    // We're only sending a single message to each listener, so\n    // remove the callback afterwards to avoid leaks.\n    worker.removeEventListener(\"message\", listener);\n  });\n\n  worker.postMessage(workerArgs);\n}\n\nexport default processWorker;\n","export function isJsonWaveformData(data) {\n  return data &&\n    typeof data === \"object\" &&\n    \"sample_rate\" in data &&\n    \"samples_per_pixel\" in data &&\n    \"bits\" in data &&\n    \"length\" in data &&\n    \"data\" in data;\n}\n\nexport function isBinaryWaveformData(data) {\n  var isCompatible = data && typeof data === \"object\" && \"byteLength\" in data;\n\n  if (isCompatible) {\n    var view = new DataView(data);\n    var version = view.getInt32(0, true);\n\n    if (version !== 1 && version !== 2) {\n      throw new TypeError(\"WaveformData.create(): This waveform data version not supported\");\n    }\n  }\n\n  return isCompatible;\n}\n\nexport function convertJsonToBinary(data) {\n  var waveformData = data.data;\n  var channels = data.channels || 1;\n  var header_size = 24; // version 2\n  var bytes_per_sample = data.bits === 8 ? 1 : 2;\n  var expected_length = data.length * 2 * channels;\n\n  if (waveformData.length !== expected_length) {\n    throw new Error(\"WaveformData.create(): Length mismatch in JSON waveform data\");\n  }\n\n  var total_size = header_size + waveformData.length * bytes_per_sample;\n\n  var array_buffer = new ArrayBuffer(total_size);\n  var data_object = new DataView(array_buffer);\n\n  data_object.setInt32(0, 2, true); // Version\n  data_object.setUint32(4, data.bits === 8, true);\n  data_object.setInt32(8, data.sample_rate, true);\n  data_object.setInt32(12, data.samples_per_pixel, true);\n  data_object.setInt32(16, data.length, true);\n  data_object.setInt32(20, channels, true);\n\n  var index = header_size;\n\n  var i;\n\n  if (data.bits === 8) {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt8(index++, waveformData[i], true);\n    }\n  }\n  else {\n    for (i = 0; i < waveformData.length; i++) {\n      data_object.setInt16(index, waveformData[i], true);\n\n      index += 2;\n    }\n  }\n\n  return array_buffer;\n}\n","\"use strict\";\n\nimport WaveformDataChannel from \"./waveform-data-channel\";\nimport processWorker from \"./builders/audiodecoder\";\nimport { isJsonWaveformData, isBinaryWaveformData, convertJsonToBinary } from \"./waveform-utils\";\n\n/**\n * Provides access to waveform data.\n */\n\nfunction WaveformData(data) {\n  if (isJsonWaveformData(data)) {\n    data = convertJsonToBinary(data);\n  }\n\n  if (isBinaryWaveformData(data)) {\n    this._data = new DataView(data);\n    this._offset = this._version() === 2 ? 24 : 20;\n\n    this._channels = [];\n\n    for (var channel = 0; channel < this.channels; channel++) {\n      this._channels[channel] = new WaveformDataChannel(this, channel);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"WaveformData.create(): Unknown data format\"\n    );\n  }\n}\n\nvar defaultOptions = {\n  scale: 512,\n  amplitude_scale: 1.0,\n  split_channels: false,\n  disable_worker: false\n};\n\nfunction getOptions(options) {\n  var opts = {\n    scale: options.scale || defaultOptions.scale,\n    amplitude_scale: options.amplitude_scale || defaultOptions.amplitude_scale,\n    split_channels: options.split_channels || defaultOptions.split_channels,\n    disable_worker: options.disable_worker || defaultOptions.disable_worker\n  };\n\n  return opts;\n}\n\nfunction createFromAudioBuffer(audio_buffer, options, callback) {\n  var audio_buffer_obj = {\n    length: audio_buffer.length,\n    sampleRate: audio_buffer.sampleRate,\n    channels: []\n  };\n\n  // Fill in the channels data.\n  for (var channel = 0; channel < audio_buffer.numberOfChannels; ++channel) {\n    audio_buffer_obj.channels[channel] = audio_buffer.getChannelData(channel);\n  }\n\n  processWorker({\n    scale: options.scale,\n    amplitude_scale: options.amplitude_scale,\n    split_channels: options.split_channels,\n    audio_buffer: audio_buffer_obj,\n    disable_worker: options.disable_worker\n  },\n  function(waveform_data) {\n    callback(null, new WaveformData(waveform_data), audio_buffer);\n  });\n}\n\nfunction createFromArrayBuffer(audioContext, audioData, options, callback) {\n  // The following function is a workaround for a Webkit bug where decodeAudioData\n  // invokes the errorCallback with null instead of a DOMException.\n  // See https://webaudio.github.io/web-audio-api/#dom-baseaudiocontext-decodeaudiodata\n  // and http://stackoverflow.com/q/10365335/103396\n\n  function errorCallback(error) {\n    if (!error) {\n      error = new DOMException(\"EncodingError\");\n    }\n\n    callback(error);\n  }\n\n  audioContext.decodeAudioData(\n    audioData,\n    function(audio_buffer) {\n      createFromAudioBuffer(audio_buffer, options, callback);\n    },\n    errorCallback\n  );\n}\n\n/**\n * Creates and returns a WaveformData instance from the given waveform data.\n */\n\nWaveformData.create = function create(data) {\n  return new WaveformData(data);\n};\n\n/**\n * Creates a WaveformData instance from audio.\n */\n\nWaveformData.createFromAudio = function(options, callback) {\n  var opts = getOptions(options);\n\n  if (options.audio_context && options.array_buffer) {\n    return createFromArrayBuffer(options.audio_context, options.array_buffer, opts, callback);\n  }\n  else if (options.audio_buffer) {\n    return createFromAudioBuffer(options.audio_buffer, opts, callback);\n  }\n  else {\n    throw new TypeError(\n      // eslint-disable-next-line\n      \"WaveformData.createFromAudio(): Pass either an AudioContext and ArrayBuffer, or an AudioBuffer object\"\n    );\n  }\n};\n\nWaveformData.prototype = {\n\n  /**\n   * Creates and returns a new WaveformData object with resampled data.\n   * Use this method to create waveform data at different zoom levels.\n   *\n   * Adapted from Sequence::GetWaveDisplay in Audacity, with permission.\n   * https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/Sequence.cpp\n   */\n\n  resample: function(options) {\n    options.scale = typeof options.scale === \"number\" ? options.scale : null;\n    options.width = typeof options.width === \"number\" ? options.width : null;\n\n    if (options.width != null && options.width <= 0) {\n      throw new RangeError(\"WaveformData.resample(): width should be a positive integer value\");\n    }\n\n    if (options.scale != null && options.scale <= 0) {\n      throw new RangeError(\"WaveformData.resample(): scale should be a positive integer value\");\n    }\n\n    if (!options.scale && !options.width) {\n      throw new Error(\"WaveformData.resample(): Missing scale or width option\");\n    }\n\n    // Scale we want to reach\n    var output_samples_per_pixel = options.scale ||\n      Math.floor(this.duration * this.sample_rate / options.width);\n    var scale = this.scale; // scale we are coming from\n\n    // The amount of data we want to resample i.e. final zoom want to resample\n    // all data but for intermediate zoom we want to resample subset\n    var input_buffer_size = this.length;\n\n    var input_buffer_length_samples = input_buffer_size * this.scale;\n    var output_buffer_length_samples =\n      Math.ceil(input_buffer_length_samples / output_samples_per_pixel);\n\n    var output_header_size = 24; // version 2\n    var bytes_per_sample = this.bits === 8 ? 1 : 2;\n    var total_size = output_header_size\n                   + output_buffer_length_samples * 2 * this.channels * bytes_per_sample;\n    var output_data = new ArrayBuffer(total_size);\n    var output_dataview = new DataView(output_data);\n\n    output_dataview.setInt32(0, 2, true); // Version\n    output_dataview.setUint32(4, this.bits === 8, true); // Is 8 bit?\n    output_dataview.setInt32(8, this.sample_rate, true);\n    output_dataview.setInt32(12, output_samples_per_pixel, true);\n    output_dataview.setInt32(16, output_buffer_length_samples, true);\n    output_dataview.setInt32(20, this.channels, true);\n\n    var waveform_data = new WaveformData(output_data);\n\n    var input_index = 0;\n    var output_index = 0;\n\n    var channels = this.channels;\n\n    var min = new Array(channels);\n    var max = new Array(channels);\n\n    var channel;\n\n    for (channel = 0; channel < channels; ++channel) {\n      if (input_buffer_size > 0) {\n        min[channel] = this.channel(channel).min_sample(input_index);\n        max[channel] = this.channel(channel).max_sample(input_index);\n      }\n      else {\n        min[channel] = 0;\n        max[channel] = 0;\n      }\n    }\n\n    var min_value = this.bits === 8 ? -128 : -32768;\n    var max_value = this.bits === 8 ?  127 :  32767;\n\n    if (output_samples_per_pixel < scale) {\n      throw new Error(\n        \"WaveformData.resample(): Zoom level \" + output_samples_per_pixel +\n        \" too low, minimum: \" + scale\n      );\n    }\n\n    var where, prev_where, stop, value, last_input_index;\n\n    function sample_at_pixel(x) {\n      return Math.floor(x * output_samples_per_pixel);\n    }\n\n    while (input_index < input_buffer_size) {\n      while (Math.floor(sample_at_pixel(output_index) / scale) === input_index) {\n        if (output_index > 0) {\n          for (channel = 0; channel < channels; ++channel) {\n            waveform_data.channel(channel).set_min_sample(output_index - 1, min[channel]);\n            waveform_data.channel(channel).set_max_sample(output_index - 1, max[channel]);\n          }\n        }\n\n        last_input_index = input_index;\n\n        output_index++;\n\n        where      = sample_at_pixel(output_index);\n        prev_where = sample_at_pixel(output_index - 1);\n\n        if (where !== prev_where) {\n          for (channel = 0; channel < channels; ++channel) {\n            min[channel] = max_value;\n            max[channel] = min_value;\n          }\n        }\n      }\n\n      where = sample_at_pixel(output_index);\n      stop = Math.floor(where / scale);\n\n      if (stop > input_buffer_size) {\n        stop = input_buffer_size;\n      }\n\n      while (input_index < stop) {\n        for (channel = 0; channel < channels; ++channel) {\n          value = this.channel(channel).min_sample(input_index);\n\n          if (value < min[channel]) {\n            min[channel] = value;\n          }\n\n          value = this.channel(channel).max_sample(input_index);\n\n          if (value > max[channel]) {\n            max[channel] = value;\n          }\n        }\n\n        input_index++;\n      }\n    }\n\n    if (input_index !== last_input_index) {\n      for (channel = 0; channel < channels; ++channel) {\n        waveform_data.channel(channel).set_min_sample(output_index - 1, min[channel]);\n        waveform_data.channel(channel).set_max_sample(output_index - 1, max[channel]);\n      }\n    }\n\n    return waveform_data;\n  },\n\n  /**\n   * Concatenates with one or more other waveforms, returning a new WaveformData object.\n   */\n\n  concat: function() {\n    var self = this;\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n\n    // Check that all the supplied waveforms are compatible\n    otherWaveforms.forEach(function(otherWaveform) {\n      if (self.channels !== otherWaveform.channels ||\n        self.sample_rate !== otherWaveform.sample_rate ||\n        self.bits !== otherWaveform.bits ||\n        self.scale !== otherWaveform.scale) {\n        throw new Error(\"WaveformData.concat(): Waveforms are incompatible\");\n      }\n    });\n\n    var combinedBuffer = this._concatBuffers.apply(this, otherWaveforms);\n\n    return WaveformData.create(combinedBuffer);\n  },\n\n  /**\n   * Returns a new ArrayBuffer with the concatenated waveform.\n   * All waveforms must have identical metadata (version, channels, etc)\n   */\n\n  _concatBuffers: function() {\n    var otherWaveforms = Array.prototype.slice.call(arguments);\n    var headerSize = this._offset;\n    var totalSize = headerSize;\n    var totalDataLength = 0;\n    var bufferCollection = [this].concat(otherWaveforms).map(function(w) {\n      return w._data.buffer;\n    });\n    var i, buffer;\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      var dataSize = new DataView(buffer).getInt32(16, true);\n\n      totalSize += buffer.byteLength - headerSize;\n      totalDataLength += dataSize;\n    }\n\n    var totalBuffer = new ArrayBuffer(totalSize);\n    var sourceHeader = new DataView(bufferCollection[0]);\n    var totalBufferView = new DataView(totalBuffer);\n\n    // Copy the header from the first chunk\n    for (i = 0; i < headerSize; i++) {\n      totalBufferView.setUint8(i, sourceHeader.getUint8(i));\n    }\n    // Rewrite the data-length header item to reflect all of the samples concatenated together\n    totalBufferView.setInt32(16, totalDataLength, true);\n\n    var offset = 0;\n    var dataOfTotalBuffer = new Uint8Array(totalBuffer, headerSize);\n\n    for (i = 0; i < bufferCollection.length; i++) {\n      buffer = bufferCollection[i];\n      dataOfTotalBuffer.set(new Uint8Array(buffer, headerSize), offset);\n      offset += buffer.byteLength - headerSize;\n    }\n\n    return totalBuffer;\n  },\n\n  /**\n   * Return the unpacked values for a particular offset.\n   */\n\n  _offsetValues: function getOffsetValues(start, length, correction) {\n    var values = [];\n    var channels = this.channels;\n\n    correction += (start * channels * 2); // offset the positioning query\n\n    for (var i = 0; i < length; i++) {\n      values.push(this._at((i * channels * 2) + correction));\n    }\n\n    return values;\n  },\n\n  /**\n   * Returns the data format version number.\n   */\n\n  _version: function() {\n    return this._data.getInt32(0, true);\n  },\n\n  /**\n   * Returns the length of the waveform, in pixels.\n   */\n\n  get length() {\n    return this._data.getUint32(16, true);\n  },\n\n  /**\n   * Returns the number of bits per sample, either 8 or 16.\n   */\n\n  get bits() {\n    var bits = Boolean(this._data.getUint32(4, true));\n\n    return bits ? 8 : 16;\n  },\n\n  /**\n   * Returns the (approximate) duration of the audio file, in seconds.\n   */\n\n  get duration() {\n    return this.length * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of pixels per second.\n   */\n\n  get pixels_per_second() {\n    return this.sample_rate / this.scale;\n  },\n\n  /**\n   * Returns the amount of time represented by a single pixel, in seconds.\n   */\n\n  get seconds_per_pixel() {\n    return this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns the number of waveform channels.\n   */\n\n  get channels() {\n    if (this._version() === 2) {\n      return this._data.getInt32(20, true);\n    }\n    else {\n      return 1;\n    }\n  },\n\n  /**\n   * Returns a waveform channel.\n   */\n\n  channel: function(index) {\n    if (index >= 0 && index < this._channels.length) {\n      return this._channels[index];\n    }\n    else {\n      throw new RangeError(\"Invalid channel: \" + index);\n    }\n  },\n\n  /**\n   * Returns the number of audio samples per second.\n   */\n\n  get sample_rate() {\n    return this._data.getInt32(8, true);\n  },\n\n  /**\n   * Returns the number of audio samples per pixel.\n   */\n\n  get scale() {\n    return this._data.getInt32(12, true);\n  },\n\n  /**\n   * Returns a waveform data value at a specific offset.\n   */\n\n  _at: function at_sample(index) {\n    if (this.bits === 8) {\n      return this._data.getInt8(this._offset + index);\n    }\n    else {\n      return this._data.getInt16(this._offset + index * 2, true);\n    }\n  },\n\n  /**\n   * Sets a waveform data value at a specific offset.\n   */\n\n  _set_at: function set_at(index, sample) {\n    if (this.bits === 8) {\n      return this._data.setInt8(this._offset + index, sample);\n    }\n    else {\n      return this._data.setInt16(this._offset + index * 2, sample, true);\n    }\n  },\n\n  /**\n   * Returns the waveform data index position for a given time.\n   */\n\n  at_time: function at_time(time) {\n    return Math.floor(time * this.sample_rate / this.scale);\n  },\n\n  /**\n   * Returns the time in seconds for a given index.\n   */\n\n  time: function time(index) {\n    return index * this.scale / this.sample_rate;\n  },\n\n  /**\n   * Returns an object containing the waveform data.\n   */\n\n  toJSON: function() {\n    const waveform = {\n      version: 2,\n      channels: this.channels,\n      sample_rate: this.sample_rate,\n      samples_per_pixel: this.scale,\n      bits: this.bits,\n      length: this.length,\n      data: []\n    };\n\n    for (var i = 0; i < this.length; i++) {\n      for (var channel = 0; channel < this.channels; channel++) {\n        waveform.data.push(this.channel(channel).min_sample(i));\n        waveform.data.push(this.channel(channel).max_sample(i));\n      }\n    }\n\n    return waveform;\n  },\n\n  /**\n   * Returns the waveform data in binary format as an ArrayBuffer.\n   */\n\n  toArrayBuffer: function() {\n    return this._data.buffer;\n  }\n};\n\nexport default WaveformData;\n"],"names":["WaveformDataChannel","waveformData","channelIndex","_waveformData","_channelIndex","prototype","min_sample","index","offset","channels","_at","max_sample","set_min_sample","sample","_set_at","set_max_sample","min_array","_offsetValues","length","max_array","WORKER_ENABLED","global","window","URL","Blob","Worker","InlineWorker","func","self","_this","functionBody","toString","trim","match","createObjectURL","type","postMessage","data","setTimeout","onmessage","bind","inlineWorker","MainThreadWorker","_listeners","call","addEventListener","event","listener","push","removeEventListener","filter","item","listeners","message","i","close","processWorker","workerArgs","callback","WaveformWorker","disable_worker","worker","INT8_MAX","INT8_MIN","calculateWaveformDataLength","audio_sample_count","scale","data_length","Math","floor","samples_remaining","evt","audio_buffer","amplitude_scale","split_channels","output_channels","version","header_size","total_size","buffer","ArrayBuffer","data_view","DataView","scale_counter","buffer_length","channel","min_value","Array","max_value","Infinity","setInt32","setUint32","sampleRate","setInt8","isJsonWaveformData","isBinaryWaveformData","isCompatible","view","getInt32","TypeError","convertJsonToBinary","bytes_per_sample","bits","expected_length","Error","array_buffer","data_object","sample_rate","samples_per_pixel","setInt16","WaveformData","_data","_offset","_version","_channels","defaultOptions","getOptions","options","opts","createFromAudioBuffer","audio_buffer_obj","numberOfChannels","getChannelData","waveform_data","createFromArrayBuffer","audioContext","audioData","errorCallback","error","DOMException","decodeAudioData","create","createFromAudio","audio_context","resample","width","RangeError","output_samples_per_pixel","duration","input_buffer_size","input_buffer_length_samples","output_buffer_length_samples","ceil","output_header_size","output_data","output_dataview","input_index","output_index","min","max","where","prev_where","stop","value","last_input_index","sample_at_pixel","x","concat","otherWaveforms","slice","arguments","forEach","otherWaveform","combinedBuffer","_concatBuffers","apply","headerSize","totalSize","totalDataLength","bufferCollection","map","w","dataSize","byteLength","totalBuffer","sourceHeader","totalBufferView","setUint8","getUint8","dataOfTotalBuffer","Uint8Array","set","getOffsetValues","start","correction","values","getUint32","Boolean","pixels_per_second","seconds_per_pixel","at_sample","getInt8","getInt16","set_at","at_time","time","toJSON","waveform","toArrayBuffer"],"mappings":"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"}